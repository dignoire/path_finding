// Generated by gencpp from file path_finding/PathResponse.msg
// DO NOT EDIT!


#ifndef PATH_FINDING_MESSAGE_PATHRESPONSE_H
#define PATH_FINDING_MESSAGE_PATHRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>

namespace path_finding
{
template <class ContainerAllocator>
struct PathResponse_
{
  typedef PathResponse_<ContainerAllocator> Type;

  PathResponse_()
    : path()  {
    }
  PathResponse_(const ContainerAllocator& _alloc)
    : path(_alloc)  {
    }



   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point32_<ContainerAllocator> >::other >  _path_type;
  _path_type path;




  typedef boost::shared_ptr< ::path_finding::PathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_finding::PathResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PathResponse_

typedef ::path_finding::PathResponse_<std::allocator<void> > PathResponse;

typedef boost::shared_ptr< ::path_finding::PathResponse > PathResponsePtr;
typedef boost::shared_ptr< ::path_finding::PathResponse const> PathResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_finding::PathResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_finding::PathResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_finding

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_finding::PathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_finding::PathResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_finding::PathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_finding::PathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_finding::PathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_finding::PathResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_finding::PathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b486115390018cf18c53ea7f1a78dca";
  }

  static const char* value(const ::path_finding::PathResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b486115390018cfULL;
  static const uint64_t static_value2 = 0x18c53ea7f1a78dcaULL;
};

template<class ContainerAllocator>
struct DataType< ::path_finding::PathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_finding/PathResponse";
  }

  static const char* value(const ::path_finding::PathResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_finding::PathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
geometry_msgs/Point32[] path\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::path_finding::PathResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_finding::PathResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PathResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_finding::PathResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_finding::PathResponse_<ContainerAllocator>& v)
  {
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "    ", v.path[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_FINDING_MESSAGE_PATHRESPONSE_H
